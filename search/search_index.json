{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Leapt Im bundle is a bundle used as general wrapper to access imagemagick command line functions, instead of using bindings like iMagick, which does not cover all the imagemagick functionalities.</p> <p>It allows you to use all the convert/mogrify power, from your controllers, services or templates.</p> <ul> <li>Installation</li> <li>Configuration</li> <li>Usage</li> <li>Extra information</li> </ul> <p>If you find a bug or want to add a functionality, please create an issue or a pull request on Github!</p>"},{"location":"#license","title":"License","text":"<p>leapt/im-bundle is released under the MIT License. See the bundled LICENSE file for details.</p>"},{"location":"#history","title":"History","text":"<p>This bundle is a fork of the Snowcap Im bundle.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Configure the bundle in the <code>config/packages/leapt_im.yaml</code> file (automatically created by Flex):</p> <pre><code>leapt_im:\n    # the directory where your imagemagick binaries are (optional). Default: /usr/bin/\n    binary_path: '/opt/local/bin/'\n\n    # the public directory of your web application relative to the project dir (optional). Default: public\n    public_path: 'public'\n\n    # the directory where the cached image are stored from your public directory (optional). Default: cache/im\n    cache_path: 'images/cache'\n\n    # the timeout in seconds for the imagemagick process (optional). Default: 60\n    timeout: 300\n\n    # optional too, a list of pre-defined conversions\n    formats:\n        # resizes to 50 width, at 80% quality\n        small:\n            resize: 50x\n            quality: 80\n\n        # resizes to fit in 100x100, only if bigger, and remove all crap (meta-data, ...)\n        medium:\n            thumbnail: 100x100&gt;\n\n        # crop to get exactly 100x100, keeping the maximum area possible, centered\n        square:\n            resize: 100x100^\n            gravity: center\n            crop: 100x100+0+0\n</code></pre>"},{"location":"extra/","title":"Extra information","text":""},{"location":"extra/#image-transformations","title":"Image transformations","text":"<p>To know more about the possible options for the formats, you'll find the exhaustive list on the ImageMagick website.</p> <p>Below you'll find a list of the possible syntaxes available in the resize and thumbnail format options.</p> Size Description scale% Height and width both scaled by specified percentage. scale-x%xscale-y% Height and width individually scaled by specified percentages. (Only one % symbol needed.) width Width given, height automagically selected to preserve aspect ratio. xheight Height given, width automagically selected to preserve aspect ratio. widthxheight Maximum values of height and width given, aspect ratio preserved. widthxheight^ Minimum values of width and height given, aspect ratio preserved. widthxheight! Width and height emphatically given, original aspect ratio ignored. widthxheight&gt; Shrinks images with dimension(s) larger than the corresponding width and/or height dimension(s). widthxheight&lt; Enlarges images with dimension(s) smaller than the corresponding width and/or height dimension(s). area@ Resize image to have specified area in pixels. Aspect ratio is preserved."},{"location":"extra/#form-type","title":"Form type","text":"<p>ImBundle comes with a form type extension for the LeaptCoreBundle Image form type. It allows you to specify a format for the image preview displayed next to the field.</p> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\ImageType;\n// ...\n$builder-&gt;add('picture', ImageType::class,[\n    'file_path' =&gt; 'picturePath',\n    'im_format' =&gt; '200x200',\n);\n</code></pre> <p>The code above will display an image preview resized to 200x200px next to the image field, very interesting for an admin view for example.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>You need to have the ImageMagick binaries available (convert &amp; mogrify)</li> <li>You need to have a cache folder in your web dir, writeable by the webserver</li> <li>Symfony 6.4/7.0+</li> <li>PHP 8.2+</li> </ul>"},{"location":"installation/#install-steps","title":"Install steps","text":"<p>If Symfony Flex is installed, the only thing you have to do is requiring the package with composer:</p> <pre><code>composer require leapt/im-bundle\n</code></pre> <p>The bundle will automatically be registered in the <code>bundles.php</code> file.</p>"},{"location":"installation/#if-flex-is-not-installed","title":"If Flex is not installed","text":""},{"location":"installation/#activate-the-bundle","title":"Activate the bundle","text":"<p>config/bundles.php (if not automatically added by Symfony Flex)</p> <p>In <code>config/bundles.php</code> add the following line:</p> <pre><code>Leapt\\ImBundle\\LeaptImBundle::class =&gt; ['all' =&gt; true],\n</code></pre>"},{"location":"installation/#add-routing","title":"Add routing","text":"<p>Create a <code>config/routes/leapt_im.yaml</code> and add the following configuration:</p> <pre><code>leapt_im:\n    resource: \"@LeaptImBundle/Resources/config/routing.php\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#twig-tag","title":"Twig tag","text":"<pre><code>{% imresize %}\n    &lt;p&gt;some content&lt;/p&gt;\n    &lt;img src=\"/some/path\" width=\"100\"&gt;\n    &lt;img src=\"{{ asset('/some/path') }}\" width=\"100\"&gt;\n{% endimresize %}\n</code></pre> <p>This will parse all content inside the tag and render image caches regarding their HTML width and/or height attributes.</p>"},{"location":"usage/#twig-function","title":"Twig function","text":"<pre><code>&lt;img src=\"{{ imresize('/some/path', 'small') }}\"&gt;\n&lt;img src=\"{{ imresize('/some/path', '120x') }}\"&gt;\n&lt;img src=\"{{ imresize('/some/path', 'x120') }}\"&gt;\n&lt;img src=\"{{ imresize('/some/path', '120x120') }}\"&gt;\n</code></pre> <p>The format - the second argument - can be a predefined format in your configuration, or a [width]x[height] syntax.</p>"},{"location":"usage/#twig-filter","title":"Twig filter","text":"<pre><code>&lt;img src=\"{{ '/some/path'|imresize('small') }}\"&gt;\n&lt;img src=\"{{ asset('/some/path')|imresize('small') }}\"&gt;\n</code></pre>"},{"location":"usage/#from-a-controller-or-a-service","title":"From a controller or a service","text":"<pre><code>use Leapt\\ImBundle\\Manager;\n\n// ...\n\npublic function __construct(\n    private Manager $imManager,\n) {\n}\n\n// ... \n\n// To create a cached file\n$this-&gt;imManager-&gt;convert($format, $path);\n\n// To resize the source file\n$this-&gt;imManager-&gt;mogrify($format, $path);\n</code></pre>"},{"location":"usage/#in-entities","title":"In entities","text":"<p>If you need to alter an uploaded image, you can add attributes on the file public property from your entity:</p> <pre><code>use Leapt\\ImBundle\\Doctrine\\Mapping as LeaptIm;\n// ...\n\n#[Assert\\File(maxSize: '6M')]\n#[LeaptIm\\Mogrify(params: ['thumbnail' =&gt; '100x100&gt;'])]\npublic $file;\n</code></pre> <p>When the form is submitted, the file will then be \"thumbnailed\" to 100x100 if bigger. You can then use the <code>$file-&gt;move()</code> method like usual.</p> <p>The <code>params</code> parameter can contain:</p> <ul> <li>an array of ImageMagick key/values (like the example above)</li> <li>a format predefined in config</li> </ul>"},{"location":"usage/#clearing-the-cache","title":"Clearing the cache","text":"<p>You can clear the cache with the following command-line task</p> <pre><code>./bin/console leapt:im:clear [age]\n</code></pre> <p>Where the age argument - optional - will only clear cache older than the [age] days.</p>"}]}